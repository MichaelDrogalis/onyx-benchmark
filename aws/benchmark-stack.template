{
    "Description": "Template to benchmark an Onyx deployment.",
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "AccountNumber": {
            "Description": "Twelve digit AWS account number.",
            "Type": "String",
            "NoEcho": "True"
        },
        "AccessKeyId": {
            "Description": "AWS access key.",
            "Type": "String",
            "NoEcho": "True"
        },
        "SecretAccessKey": {
            "Description": "AWS secret key.",
            "Type": "String",
            "NoEcho": "True"
        },
        "KeyName": {
            "Description": "Name of an existing EC2 Key Pair used to log into the nodes.",
            "Type": "String"
        },
        "Peers": {
            "Description": "Number of instances to provision as Peer nodes.",
            "Type": "Number",
            "Default": 3
        },
        "VirtualPeers": {
            "Description": "Number of virtual peers per peer instance.",
            "Type": "Number",
            "Default": 4
        },
        "RegionAZ": {
            "Description": "AWS Region to deploy all instances to.",
            "Type": "String"
        },
        "PeerInstanceType": {
            "Description": "Instance type to provision as Peer nodes in the cluster.",
            "Type": "String",
            "Default": "c4.large"
        },
        "ZooKeeperInstanceType": {
            "Description": "Instance type to provision as the ZooKeeper host.",
            "Type": "String",
            "Default": "m3.large"
        },
        "MetricsInstanceType": {
            "Description": "Instance type to provision as the Metrics host.",
            "Type": "String",
            "Default": "m3.large"
        },
        "PeerSpotPrice": {
            "Description": "Maximum spot price in USD (e.g.: 1.50) for each peer machine.",
            "Type": "String"
        },
        "ZooKeeperSpotPrice": {
            "Description": "Maximum spot price in USD (e.g.: 1.50) for the ZooKeeper machine.",
            "Type": "String"
        },
        "MetricsSpotPrice": {
            "Description": "Maximum spot price in USD (e.g.: 1.50) for the metrics machine.",
            "Type": "String"
        },
        "BatchSize": {
            "Description": "Number of segments to send per batch in Onyx.",
            "Type": "Number",
            "Default": 20
        },
        "SSHLocation" : {
            "Description" : "The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
	"BenchmarkGitCommit" : {
	    "Description" : "The git commit SHA for the benchmark code that should be run. Will be combined with the OnyxGitCommit and used as deployment id",
	    "Type": "String"
	},
	"OnyxGitCommit" : {
	    "Description" : "The git commit SHA for the onyx library version that should be used. Will be combined with the benchmark git commit and used as deployment id",
	    "Type": "String"
	},
	"RunId" : {
	    "Description" : "The run number for this bench (make sure to increment if you're using the same benchmark and onyx commit SHAs",
	    "Type": "String"
	}
    },
    "Mappings": {
        "AWSInstanceType2Arch": {
            "t1.micro": {
                "Arch": "64HVM"
            },
            "m1.small": {
                "Arch": "64HVM"
            },
            "m1.medium": {
                "Arch": "64HVM"
            },
            "m1.large": {
                "Arch": "64HVM"
            },
            "m1.xlarge": {
                "Arch": "64HVM"
            },
            "m2.xlarge": {
                "Arch": "64HVM"
            },
            "m2.2xlarge": {
                "Arch": "64HVM"
            },
            "m2.4xlarge": {
                "Arch": "64HVM"
            },
            "m3.large": {
                "Arch": "64HVM"
            },
            "c1.medium": {
                "Arch": "64HVM"
            },
            "c1.xlarge": {
                "Arch": "64HVM"
            },
            "cc1.4xlarge": {
                "Arch": "64HVM"
            },
            "c4.large": {
                "Arch": "64HVM"
            },            
            "cc2.8xlarge": {
                "Arch": "64HVM"
            },
            "cg1.4xlarge": {
                "Arch": "64HVM"
            }
        },
        "AWSRegionArch2AMI": {
            "us-east-1": {
                "64HVM": "ami-9a562df2"
            }
        }
    },
    "Resources": {
        "OnyxSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable SSH access",
                "SecurityGroupIngress": [
                    { "IpProtocol" : "tcp", "FromPort" : "1", "ToPort" : "65535", "CidrIp" : "0.0.0.0/0" },
                    { "IpProtocol" : "udp", "FromPort" : "1", "ToPort" : "65535", "CidrIp" : "0.0.0.0/0" },
                    { "IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : "0.0.0.0/0" }
                ]
            }
        },

        "PeerLaunchConfiguration":
        {
		"Type" : "AWS::AutoScaling::LaunchConfiguration",
		"Metadata" : {
			"AWS::CloudFormation::Init" : {
				"configSets" : {
					"peer-run": [ "fileConfig", "commandConfig" ]
				},

				"fileConfig" : {
					"files" : {
						"/etc/cfn/cfn-hup.conf" : {
							"content" : { "Fn::Join" : ["", [
								"[main]\n",
								"stack=", { "Ref" : "AWS::StackName" }, "\n",
								"region=", { "Ref" : "AWS::Region" }, "\n",
								"interval=1\n"
							]]},
							"mode"    : "000400",
							"owner"   : "root",
							"group"   : "root"
						},

						"/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
							"content": { "Fn::Join" : ["", [
								"[cfn-auto-reloader-hook]\n",
								"triggers=post.update\n",
								"path=Resources.PeerLaunchConfiguration.Metadata.AWS::CloudFormation::Init\n",
								"action=/usr/local/bin/cfn-init -c peer-run -s ",
								{ "Ref" : "AWS::StackName" }, " -r PeerLaunchConfiguration ",
								" --region ", { "Ref" : "AWS::Region" }, "\n",
								"runas=root\n"
							]]}
						}
					}
				},

				"commandConfig" : {
					"commands" : {
						"update-bench-repo" : {
							"command" : { "Fn::Join" : ["", 
								["./update_repo.sh ",  
								{ "Ref" : "BenchmarkGitCommit" },
								" >> /home/ubuntu/init-commands.txt 2>&1 "]]},
							"ignoreErrors" : "false",
							"cwd" : "/onyx-benchmark"
						},
						"run-peer" : {
							"command" : { "Fn::Join" : ["", 
								["./run_peer.sh ",  
								{ "Ref" : "OnyxGitCommit" }, " ", 
								{ "Ref" : "BenchmarkGitCommit" }, " ",
								{ "Ref" : "RunId" }, " ",
								{ "Ref": "VirtualPeers" }, " ",
								">> /home/ubuntu/init-commands.txt 2>&1 "]]},
								"ignoreErrors" : "false",
								"cwd" : "/onyx-benchmark"
						}
					}
				}
			}
		},
		"Properties" : {
			"ImageId" : { "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" }, "64HVM"]},
			"InstanceType" : { "Ref": "PeerInstanceType" },
			"KeyName" : { "Ref": "KeyName" },
			"SecurityGroups" : [ { "Ref": "OnyxSecurityGroup" } ],
			"UserData": {
				"Fn::Base64" : {
					"Fn::Join" : [
						"",
					[
						"#!/bin/bash\n",
					"export LANG=en_US.UTF-8\n",
					"export HOME=/home/ubuntu\n",
					"export AWS_ACCESS_KEY_ID=", { "Ref" : "AccessKeyId" }, "\n",
					"export AWS_SECRET_ACCESS_KEY=", { "Ref": "SecretAccessKey" }, "\n",
					"export AWS_DEFAULT_REGION=", { "Ref" : "AWS::Region" }, "\n",
					"mkdir /etc/cfn", "\n",
					"apt-get update", "\n",
					"apt-get install -y python-pip\n",
					"wget https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu/13.10/x86_64/chefdk_0.1.0-1_amd64.deb\n",
					"dpkg -i chefdk_0.1.0-1_amd64.deb\n",
					"apt-get install -y git\n",
					"git clone https://github.com/MichaelDrogalis/onyx.git\n",
					"git clone https://github.com/MichaelDrogalis/onyx-benchmark.git\n",
					"chown -R ubuntu:ubuntu onyx-benchmark\n",
					"pip install awscli\n",
					"aws ec2 describe-instances > /home/ubuntu/instances.json\n",
					"cd onyx-benchmark/chef/ec2\n",
					"berks install &> /home/ubuntu/berks-install.log\n",
					"berks vendor vendors &> /home/ubuntu/berks-vendor.log\n",
					"chef-solo -j peer-pre-node.json -c solo.rb &> /home/ubuntu/chef-pre.log\n",
					"cd /onyx-benchmark\n",
					"lein run -m onyx-benchmark.util ", { "Ref" : "AWS::StackName" }, " ", { "Ref" : "AWS::Region" }, " ", "/home/ubuntu/instances.json\n",
					"cd chef/ec2\n",
					"chef-solo -j peer-post-node.json -c solo.rb &> /home/ubuntu/chef-post.log\n",
					"chmod +x /onyx-benchmark/aws/peer_cfn_hup/run_peer.sh\n",
					"/usr/local/bin/cfn-init -v -c peer-run -s ", { "Ref" : "AWS::StackName" }, " -r PeerLaunchConfiguration ",
					"    --region ", { "Ref" : "AWS::Region" }, " >> /var/log/cfn-init.log\n",
					"/usr/local/bin/cfn-hup -c /etc/cfn\n",
					"cfn-signal -e $? ",
					"         --stack ", { "Ref" : "AWS::StackName" },
					"         --resource PeerScalingGroup ",
					"         --region ", { "Ref" : "AWS::Region" }
					]
						]
				}
			}
		}
	},
	"ZooKeeperLaunchConfiguration":
        {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties" : {
                "ImageId" : { "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" }, "64HVM"]},
                "InstanceType" : { "Ref": "ZooKeeperInstanceType" },
                "KeyName" : { "Ref": "KeyName" },
                "SecurityGroups" : [ { "Ref": "OnyxSecurityGroup" } ],
                "UserData": {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "#!/bin/bash\n",
                                "export LANG=en_US.UTF-8\n",
                                "export HOME=/home/ubuntu\n",
                                "wget https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu/13.10/x86_64/chefdk_0.1.0-1_amd64.deb\n",
                                "dpkg -i chefdk_0.1.0-1_amd64.deb\n",
				"apt-get update\n",
                                "apt-get install -y git\n",
                                "git clone https://github.com/MichaelDrogalis/onyx-benchmark.git\n",
                                "chown -R ubuntu:ubuntu onyx-benchmark\n",
                                "cd onyx-benchmark/chef/ec2\n",
                                "berks install &> /home/ubuntu/berks-install.log\n",
                                "berks vendor vendors &> /home/ubuntu/berks-vendors.log\n",
                                "chef-solo -j zk-node.json -c solo.rb &> /home/ubuntu/chef.log\n",
                                "cfn-signal -e $? ",
                                "         --stack ", { "Ref" : "AWS::StackName" },
                                "         --resource ZooKeeperScalingGroup ",
                                "         --region ", { "Ref" : "AWS::Region" }
                            ]
                        ]
                    }
                }
            }
        },
        "MetricsLaunchConfiguration":
        {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
	    "Properties" : {
                "ImageId" : { "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" }, "64HVM"]},
                "InstanceType" : { "Ref": "MetricsInstanceType" },
                "KeyName" : { "Ref": "KeyName" },
                "SecurityGroups" : [ { "Ref": "OnyxSecurityGroup" } ],
                "UserData": {
                    "Fn::Base64" : {
                        "Fn::Join" : [
                            "",
                            [
                                "#!/bin/bash\n",
                                "export LANG=en_US.UTF-8\n",
                                "export HOME=/home/ubuntu\n",
                                "wget https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu/13.10/x86_64/chefdk_0.1.0-1_amd64.deb\n",
                                "dpkg -i chefdk_0.1.0-1_amd64.deb\n",
				"apt-get update\n",
                                "apt-get install -y git\n",
                                "git clone https://github.com/MichaelDrogalis/onyx-benchmark.git\n",
                                "chown -R ubuntu:ubuntu onyx-benchmark\n",
                                "cd onyx-benchmark/chef/ec2\n",
                                "berks install &> /home/ubuntu/berks-install.log\n",
                                "berks vendor vendors &> /home/ubuntu/berks-vendors.log\n",
                                "chef-solo -j metrics-node.json -c solo.rb &> /home/ubuntu/chef.log\n",
                                "cfn-signal -e $? ",
                                "         --stack ", { "Ref" : "AWS::StackName" },
                                "         --resource MetricsScalingGroup ",
                                "         --region ", { "Ref" : "AWS::Region" }
                            ]
                        ]
                    }
                }
           }
        },
        "PeerScalingGroup" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn" : [ "ZooKeeperScalingGroup", "MetricsScalingGroup" ],
            "Properties" : {
                "AvailabilityZones" : [ { "Ref" : "RegionAZ" } ],
                "LaunchConfigurationName" : { "Ref" : "PeerLaunchConfiguration" },
                "MinSize" : { "Ref" : "Peers" },
                "MaxSize" : { "Ref" : "Peers" },
                "DesiredCapacity" : { "Ref" : "Peers" },
                "Tags" : [ {
                    "Key" : "stack-name",
                    "Value" : { "Ref" : "AWS::StackName" },
                    "PropagateAtLaunch" : "true"
                }, {
                    "Key" : "stack-region",
                    "Value" : { "Ref": "AWS::Region" },
                    "PropagateAtLaunch" : "true"
                }, {
                    "Key" : "stack-role",
                    "Value" : "peer",
                    "PropagateAtLaunch" : "true"
		}]
            },
            "CreationPolicy" : {
                "ResourceSignal" : {
                    "Timeout" : "PT30M",
                    "Count": { "Ref": "Peers" }
                }
            }
        },
        "ZooKeeperScalingGroup" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "AvailabilityZones" : [ { "Ref" : "RegionAZ" } ],
                "LaunchConfigurationName" : { "Ref" : "ZooKeeperLaunchConfiguration" },
                "MinSize" : 1,
                "MaxSize" : 1,
                "DesiredCapacity" : 1,
                "Tags" : [ {
                    "Key" : "stack-name",
                    "Value" : { "Ref" : "AWS::StackName" },
                    "PropagateAtLaunch" : "true"
                }, {
                    "Key" : "stack-region",
                    "Value" : { "Ref": "AWS::Region" },
                    "PropagateAtLaunch" : "true"
                }, {
                    "Key" : "stack-role",
                    "Value" : "zookeeper",
                    "PropagateAtLaunch" : "true"
                } ]
            },
            "CreationPolicy" : {
                "ResourceSignal" : {
                    "Timeout" : "PT30M"
                }
            }
        },
        "MetricsScalingGroup" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "AvailabilityZones" : [ { "Ref" : "RegionAZ" } ],
                "LaunchConfigurationName" : { "Ref" : "MetricsLaunchConfiguration" },
                "MinSize" : 1,
                "MaxSize" : 1,
                "DesiredCapacity" : 1,
                "Tags" : [ {
                    "Key" : "stack-name",
                    "Value" : { "Ref" : "AWS::StackName" },
                    "PropagateAtLaunch" : "true"
                }, {
                    "Key" : "stack-region",
                    "Value" : { "Ref": "AWS::Region" },
                    "PropagateAtLaunch" : "true"
                }, {
                    "Key" : "stack-role",
                    "Value" : "metrics",
                    "PropagateAtLaunch" : "true"
                } ]
            },
            "CreationPolicy" : {
                "ResourceSignal" : {
                    "Timeout" : "PT30M"
                }
            }
        }
    }
}
